<Project ToolsVersion="14.0" DefaultTargets="Test">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <PathSeparator>/</PathSeparator>
    <PathSeparator Condition=" '$(OSName)' == 'win' ">\</PathSeparator>
  </PropertyGroup>

  <Import Project="test/TestPackageProjects.targets" />
  <Import Project="test/TestProjects.targets" />

  <Target Name="Test"
          Condition=" '$(CLIBUILD_SKIP_TESTS)' != 'true' "
          DependsOnTargets="EnsureStageSeparation;
                            BuildTests;">

    <PropertyGroup>
      <PathListSeparator>:</PathListSeparator>
      <PathListSeparator Condition=" '$(OSName)' == 'win' ">%3b</PathListSeparator>
      <ExecPath>$(Stage2Directory)$(PathListSeparator)$(PATH)</ExecPath>
      <ExecPath Condition=" '$(OSName)' == 'win' ">$(Stage2Directory)</ExecPath>
      <TestArtifactsEnv>$(TestArtifactsDir)</TestArtifactsEnv>
    </PropertyGroup>

    <ItemGroup>
      <TestTaskEnvironmentVariables Include="PATH=$(ExecPath)" />
      <TestTaskEnvironmentVariables Include="TEST_ARTIFACTS=$(TestArtifactsEnv)" />
    </ItemGroup>

    <PropertyGroup>
      <RunTestEnvironmentVariables>@(TestTaskEnvironmentVariables)</RunTestEnvironmentVariables>
    </PropertyGroup>

    <ItemGroup>
      <ProjectsToTest Include="build/test/RunTest.proj">
        <Properties>
          CLIBuildDll=$(CLIBuildDll); 
          Configuration=$(Configuration);
          EnvironmentVariables=$(RunTestEnvironmentVariables);
          TestProject=%(TestProjects.Identity);
          TestResultXmlDir=$(TestResultXmlDir);
          ToolPath=$(Stage2Directory);
          WorkingDirectory=$([System.IO.Directory]::GetParent(%(TestProjects.Identity))) 
        </Properties>
      </ProjectsToTest>
    </ItemGroup>

    <!-- Begin Workaround lack of a stable package version for depedencies; copy into simulated stable version folders -->
 
    <PropertyGroup>
        <StableSharedFrameworkDirectory>$(Stage2Directory)/shared/Microsoft.NETCore.App/$(SharedFrameworkStableVersion)</StableSharedFrameworkDirectory>
        <StableAdditionalSharedFrameworkDirectory>$(Stage2Directory)/shared/Microsoft.NETCore.App/$(AdditionalSharedFrameworkStableVersion)</StableAdditionalSharedFrameworkDirectory>
    </PropertyGroup>

    <ItemGroup>  
        <Stabilize_SourceFiles_1_1 Include="$(Stage2Directory)/shared/Microsoft.NETCore.App/$(CLI_SharedFrameworkVersion)/*.*"/>  
        <Stabilize_SourceFiles_1_0 Include="$(Stage2Directory)/shared/Microsoft.NETCore.App/$(CLI_SharedFrameworkVersion_1_0)/*.*"/>  
        <SimulatedStableSharedFrameworkDirectories Condition=" '$(IsSharedFrameworkPreReleaseVersion)' == 'True' "
                                          Include="$(StableSharedFrameworkDirectory)" />
        <SimulatedStableSharedFrameworkDirectories Condition=" '$(IsAdditionalSharedFrameworkPreReleaseVersion)' == 'True' "
                                          Include="$(StableAdditionalSharedFrameworkDirectory)" />
    </ItemGroup>

    <Copy
        Condition=" '$(IsAdditionalSharedFrameworkPreReleaseVersion)' == 'True' "
        SourceFiles="@(Stabilize_SourceFiles_1_0)"  
        DestinationFiles="@(Stabilize_SourceFiles_1_0->'$(StableAdditionalSharedFrameworkDirectory)/%(RecursiveDir)%(Filename)%(Extension)')"  
    />  
    <Copy
        Condition=" '$(IsSharedFrameworkPreReleaseVersion)' == 'True' "
        SourceFiles="@(Stabilize_SourceFiles_1_1)"  
        DestinationFiles="@(Stabilize_SourceFiles_1_1->'$(StableSharedFrameworkDirectory)/%(RecursiveDir)%(Filename)%(Extension)')"  
    />
 
    <!-- End Workaround lack of a stable package version for depedencies; copy into simulated stable versions -->

    <Message Text="Starting test execution" Importance="High" />
  
    <MSBuild
      BuildInParallel="True"
      Projects="@(ProjectsToTest)">
    </MSBuild>

    <Message Text="Finished test execution" Importance="High" />

    <!-- Begin Workaround lack of a stable package version for depedencies; remove simulated stable version folder. -->

    <RemoveDir Directories="@(SimulatedStableSharedFrameworkDirectories)" />
 
    <!-- End Workaround lack of a stable package version for depedencies; remove simulated stable version folder. -->
  </Target>

  <Target Name="PrepareTests"
          DependsOnTargets="Init;
                            SetupTestProjectData">
    <PropertyGroup>
      <TestOutputDir>$(RepoRoot)/artifacts/testpackages/</TestOutputDir>
      <TestPackagesBuildDir>$(TestOutputDir)/packagesBuild/</TestPackagesBuildDir>
      <TestPackagesDir>$(TestOutputDir)/packages/</TestPackagesDir>
      <TestArtifactsDir>$(TestOutputDir)/artifacts/</TestArtifactsDir>
      <TestResultXmlDir>$(TestOutputDir)/results/</TestResultXmlDir>
      <TestDirectory>$(RepoRoot)/test/</TestDirectory>
      <DotnetUnderTest>$(Stage2Directory)</DotnetUnderTest>
    </PropertyGroup>

    <MakeDir Directories="$(TestPackagesDir)" Condition="!Exists('$(TestPackagesDir)')"/>
  </Target>

  <Target Name="RestoreTests"
          DependsOnTargets="PrepareTests;
                            CreateTestAssetPackageNuPkgs;">
    <DotNetRestore ToolPath="$(Stage0Directory)"
                   ProjectPath="&quot;$(TestDirectory)/Microsoft.DotNet.Cli.Tests.sln&quot;" />
  </Target>

  <Target Name="BuildTests"
          DependsOnTargets="RestoreTests;">
    <DotNetBuild ToolPath="$(Stage0Directory)"
                 ProjectPath="&quot;$(TestDirectory)/Microsoft.DotNet.Cli.Tests.sln&quot;"
                 MaxCpuCount="1" />
  </Target>

  <Target Name="CreateTestAssetPackageNuPkgs"
          DependsOnTargets="SetupTestPackageProjectData;"
          Outputs="%(TestPackageProject.Identity)">

    <PropertyGroup>
      <TestAssetNuGetConfigContent>
        &lt;configuration&gt;
          &lt;packageSources&gt;
            &lt;add key="configurable.source" value="$(TestPackagesDir)" /&gt;
            &lt;add key="dotnet-core" value="https://dotnet.myget.org/F/dotnet-core/api/v3/index.json" /&gt;
          &lt;/packageSources&gt;
        &lt;/configuration&gt;
      </TestAssetNuGetConfigContent>
      <TestAssetNuGetConfigFilePath>$(TestOutputDir)/Nuget.config</TestAssetNuGetConfigFilePath>
    </PropertyGroup>

    <WriteLinesToFile Condition="!Exists('$(TestAssetNuGetConfigFilePath)')"
                      File="$(TestAssetNuGetConfigFilePath)" 
                      Lines="$(TestAssetNuGetConfigContent)" />    

    <DotNetRestore ToolPath="$(Stage2Directory)"
                   ConfigFile="$(TestAssetNuGetConfigFilePath)"
                   ProjectPath="%(TestPackageProject.ProjectPath)" />
 
    <!-- https://github.com/NuGet/Home/issues/4063 -->
    <DotNetPack Output="$(TestPackagesDir)"
                ProjectPath="%(TestPackageProject.ProjectPath)"
                ToolPath="$(Stage0Directory)"
                VersionSuffix="%(TestPackageProject.VersionSuffix)"
                MsbuildArgs="%(TestPackageProject.MsbuildArgs) /p:SdkNuGetVersion=$(SdkNugetVersion)" />

  </Target>

  <Target Name="EnsureStageSeparation">
    <DotNetMSBuild Arguments="/v:diag $(RepoRoot)/build_projects/Microsoft.DotNet.Cli.Build.SelfTest/InvokeWithStage0.proj /p:Stage2Directory=&quot;$(Stage2Directory)&quot;"
                   ToolPath="$(Stage0Directory)" />
  </Target>
</Project>
